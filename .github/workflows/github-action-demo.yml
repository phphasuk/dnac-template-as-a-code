name: GitHub Actions Demo
on: [push]
env:
  DNAC_PASSWORD: ${{ secrets.DNAC_PASSWORD }}
  WEBEX_API_NOTIFICATION_TOKEN: ${{ secrets.WEBEX_API_NOTIFICATION_TOKEN }}
  DEBUG: "--debug"
jobs:
  validate:
    runs-on: self-hosted
    name: validate
    environment: staging
    steps:
      - uses: actions/checkout@v2
      - run: scripts/validate.py
  provision-prod:
    runs-on: self-hosted
    name: provision-prod
    environment: production
    steps:
      - run: scripts/provision_templates.py --config ${{ secrets.CONFIG_YAML }} --template_dir ${{ secrets.TEMPLATE_DIR }} --results results-1-provision.json ${{ env.DEBUG }}
      - uses: actions/upload-artifact@v2
        with:
          name: results-1-provision.json
          path: results-1-provision.json
    needs: validate
  preview-template-prod:
    runs-on: self-hosted
    name: preview-template-prod
    environment: production
    steps:
      - run: scripts/preview_templates.py --config ${{ secrets.CONFIG_YAML }} --outfile template-preview.txt --deploy_dir ${{ secrets.DEPLOY_DIR }} ${{ env.DEBUG }}
      - uses: actions/upload-artifact@v2
        with:
          name: template-preview.txt
          path: template-preview.txt
    needs: [validate, provision-prod]
  deploy-prod:
    runs-on: self-hosted
    name: deploy-prod
    environment: production
    steps:
      - run: scripts/deploy_templates.py --config ${{ secrets.CONFIG_YAML }} --deploy_dir ${{ secrets.DEPLOY_DIR }} --results results-2-deploy.json ${{ env.DEBUG }}
      - uses: actions/upload-artifact@v2
        with:
          name: results-2-deploy.json
          path: results-2-deploy.json
    needs: [validate, provision-prod, preview-template-prod]
  test-prod:
    runs-on: self-hosted
    name: test-prod
    environment: production
    steps:
      - run: rm -rf tests/deploy || true
      - run: scripts/render_tests.py --config ${{ secrets.CONFIG_YAML }} --deploy_dir ${{ secrets.DEPLOY_DIR }} --out_dir tests/deploy/ ${{ env.DEBUG }}
      - run: cd tests/
      - run: pwd
      - run: python -m robot --name 'DNAC Template Tests' --outputdir out/ --xunit output-junit.xml --variable testbed:tests/${{ secrets.TESTBED }} --extension robot .
      - run: cd ..
      - run: scripts/parse_testresults.py tests/out/output.xml results-3-tests.json
      - uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            tests/out/*
            tests/deploy/*
            results-3-tests.json
      - uses: mikepenz/action-junit-report@v2
        with:
          report_paths: tests/out/output-junit.xml
    needs: [validate, provision-prod, preview-template-prod, deploy-prod]
  notify-success-prod:
    runs-on: self-hosted
    name: notify-success-prod
    if: success()
    environment: production
    steps:
      - run: ATTACH="" ; for f in tests/out/log.html template-preview.txt  ; do test -f $f && ATTACH="$ATTACH --attach $f"; done; echo $ATTACH
      - run: RESULTS="" ; for f in results*json ; do test -f $f && RESULTS="$RESULTS --results $f" ; done ; echo $RESULTS
      - run: python scripts/notify.py --config ${{ secrets.CONFIG_YAML }} $ATTACH $RESULTS  "✅ Pipeline on branch \"$GITHUB_REF_NAME\" completed successfully ($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
    needs: [validate, provision-prod, preview-template-prod, deploy-prod, test-prod]
  notify-failure-prod:
    runs-on: self-hosted
    name: notify-failure-prod
    if: failure()
    environment: production
    steps:
      - run: ATTACH="" ; for f in tests/out/log.html template-preview.txt  ; do test -f $f && ATTACH="$ATTACH --attach $f"; done; echo $ATTACH
      - run: RESULTS="" ; for f in results*json ; do test -f $f && RESULTS="$RESULTS --results $f" ; done ; echo $RESULTS
      - run: python scripts/notify.py --config ${{ secrets.CONFIG_YAML }} $ATTACH $RESULTS "❌ Pipeline on branch \"$GITHUB_REF_NAME\" failed ($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
    needs: [validate, provision-prod, preview-template-prod, deploy-prod, test-prod]
